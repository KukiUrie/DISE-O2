import time
import serial
import RPi.GPIO as GPIO
import random

# Configura la conexión serial con el Arduino
ser = serial.Serial('/dev/ttyACM0', 9600)  # Ajusta el puerto según sea necesario

# Configuración de los pines de los botones y asignación a tiras específicas
GPIO.setmode(GPIO.BCM)  # Usar la numeración BCM de los pines
button_pins = {
    17: "STRIP1",  # Botón 1 controla la Tira 1
    27: "STRIP2",  # Botón 2 controla la Tira 2
    22: "STRIP3",  # Botón 3 controla la Tira 3
    5: "STRIP4",   # Botón 4 controla la Tira 4
    6: "STRIP5",   # Botón 5 controla la Tira 5
    13: "STRIP6",  # Botón 6 controla la Tira 6
    19: "STRIP7"   # Botón 7 controla la Tira 7
}

# Configurar los pines GPIO para los botones
for pin in button_pins.keys():
    GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Función para enviar un comando al Arduino
def send_command(command):
    ser.write((command + '\n').encode())  # Envía el comando con una nueva línea al final

# Selecciona aleatoriamente una tira para encender
def start_random_strip():
    strip = random.choice(list(button_pins.values()))
    send_command(f"ENCENDER_{strip}")
    return strip

# Juego principal
try:
    active_strip = start_random_strip()  # Empieza con una tira LED aleatoria encendida

    while True:
        for pin, strip in button_pins.items():
            # Detecta si el botón correspondiente ha sido presionado
            if GPIO.input(pin) == GPIO.LOW and strip == active_strip:
                # Envía el comando para apagar la tira activa
                send_command(f"APAGAR_{strip}")
                print(f"Tira apagada: {strip}")

                # Espera un momento y luego enciende otra tira aleatoria
                time.sleep(0.5)
                active_strip = start_random_strip()
                print(f"Tira encendida: {active_strip}")

                # Espera a que se suelte el botón antes de continuar
                while GPIO.input(pin) == GPIO.LOW:
                    time.sleep(0.1)

        time.sleep(0.1)  # Pequeño retardo para evitar lecturas rápidas

except KeyboardInterrupt:
    print("Finalizando el juego y apagando todas las tiras.")
    for strip in button_pins.values():
        send_command(f"APAGAR_{strip}")
    ser.close()
    GPIO.cleanup()
